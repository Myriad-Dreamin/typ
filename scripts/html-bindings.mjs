// https://raw.githubusercontent.com/microsoft/vscode-custom-data/d17efbb5d4da22adcdbf3316b2f0e91e2eac7325/web-data/html/htmlTags.json

const htmlMeta = await fetch(
  "https://raw.githubusercontent.com/microsoft/vscode-custom-data/d17efbb5d4da22adcdbf3316b2f0e91e2eac7325/web-data/html/htmlTags.json"
);

const htmlMetaJson = await htmlMeta.json();

const bindings = [];
const bindings2 = [];

const xName = (name) => {
  if (name === "for") {
    return "x-for"; // 'for' is a reserved keyword
  }
  return name;
};

const common = [
  { name: "class", description: "The class attribute of the element." },
  { name: "id", description: "The id attribute of the element." },
  { name: "style", description: "The style attribute of the element." },
];

const excluded = [
  "html",
  "link",
  "table",
  "label",
  "style",
  "strong",
  "time",
  "figure",
  "sub",
  "sup",
];

for (const tag of htmlMetaJson) {
  // harms the import
  if (tag == "html") continue;

  const attrs = [...tag.attributes, ...common];

  const tagName = tag.name;
  const tagAttrs = attrs.map((attr) => `${xName(attr.name)}: none`).join(", ");
  const tagTransfer = attrs
    .map(
      (attr) =>
        `if ${xName(attr.name)} != none {attrs.insert("${attr.name}", ${xName(
          attr.name
        )})};`
    )
    .join("");
  const attrDocs = attrs
    .map(
      (attr) =>
        `\n/// - ${xName(attr.name)} (str): The ${
          attr.name
        } attribute of the \`<${tagName}>\` element.`
    )
    .join("");
  const mdnLink = `\n/// \n/// #link("https://developer.mozilla.org/en-US/docs/Web/HTML/Element/${tagName}")[MDN Documentation]\n/// `;

  bindings2.push(
    `/// Creates a \`html <${tagName}>\` element with the given content.${mdnLink}${attrDocs}\n#let ${tagName}(body, ${tagAttrs}, ..attrs) = {assert(attrs.pos().len() == 0, message: "can have only one body");let attrs = attrs.named();${tagTransfer}std.html.elem("${tagName}", attrs: attrs, body)}`
  );
  if (!excluded.includes(tagName)) {
    bindings.push(tagName);
  }
}

const result = `/// This file is auto-generated from the HTML tags metadata.
/// Do not edit this file directly.
/// HTML element bindings
/// ${excluded.join(
  ", "
)} are excluded because they are conflicting with \`std\`.

#import "html-bindings-h.typ" as h
#import h: ${bindings.join(", ")}
`;

const result2 = `/// This file is auto-generated from the HTML tags metadata.
/// Do not edit this file directly.
/// HTML element bindings


${bindings2.join("\n")}
`;
import { writeFile } from "node:fs/promises";
const outputFile = "typ/packages/html-bindings.typ";
await writeFile(outputFile, result, "utf8");
const outputFile2 = "typ/packages/html-bindings-h.typ";
await writeFile(outputFile2, result2, "utf8");
